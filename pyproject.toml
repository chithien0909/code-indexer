[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-code-indexer"
version = "1.1.0"
description = "MCP Code Indexer - Index and search source code repositories via Model Context Protocol"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "MCP Code Indexer Team", email = "team@mcp-code-indexer.dev"}
]
maintainers = [
    {name = "MCP Code Indexer Team", email = "team@mcp-code-indexer.dev"}
]
keywords = [
    "mcp",
    "model-context-protocol", 
    "code-indexer",
    "search",
    "llm",
    "ai",
    "development-tools"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Go",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Tools",
    "Topic :: Text Processing :: Indexing",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]
requires-python = ">=3.8"
dependencies = []

[project.urls]
Homepage = "https://github.com/my-mcp/code-indexer"
Documentation = "https://github.com/my-mcp/code-indexer/blob/main/README.md"
Repository = "https://github.com/my-mcp/code-indexer.git"
Issues = "https://github.com/my-mcp/code-indexer/issues"
Changelog = "https://github.com/my-mcp/code-indexer/blob/main/CHANGELOG.md"

[project.scripts]
code-indexer = "mcp_code_indexer:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=23.0",
    "isort>=5.0",
    "flake8>=6.0",
    "mypy>=1.0"
]

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["python"]
include = ["mcp_code_indexer*"]

[tool.setuptools.package-data]
mcp_code_indexer = [
    "bin/*",
    "config/*",
    "*.yaml",
    "*.yml",
    "*.json"
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["mcp_code_indexer"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["mcp_code_indexer"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]
